=== Module 4 -> Essential Google Cloud Infrastructure: Foundation ===

--- Other notes:
    By default, Compute Engine adds the generated key to project or instance metadata.
    If your account is configured to use OS Login, Compute Engine stores the generated key with your user account
    It's recommanded to use curstom mode network in production 

        -> Search 
    ---------------------------------------------------------------------------------------------------------------------------------------------------------------
    * Do more research about discount 

    Note that the IP CIDR ranges of these networks do not overlap. This allows you to set up mechanisms such as 
    VPC peering between the networks. If you specify IP CIDR ranges that are different from your on-premises network, 
    you could even configure hybrid connectivity using VPN or Cloud Interconnect.

    * Therefore, no internal IP address communication is allowed between networks, unless you set up mechanisms such as VPC peering or VPN.

    TPUs are Googleâ€™s custom-developed application-specific integrated circuits used to accelerate machine learning workloads.
    TPUs act as domain-specific hardware, as opposed to general-purpose hardware with CPUs and GPUs.
    This allows for higher efficiency by tailoring architecture to meet the computation needs in a domain, such as the matrix multiplication in machine learning.

    Cloud TPUs have been integrated across Google products, making this state-of-the-art hardware and supercomputing technology available to Google Cloud customers. 

    Compute Engine can live migrate virtual machine to another host due to a maintenance event to prevent applications from experiencing disruptions.

    To take advantage of the full 30% discount, create your VM instances on the first day of the month, because discounts reset at the beginning of each month.

    screen, an application that allows you to create a virtual terminal that can be "detached," becoming a background process, or "reattached," becoming a foreground process.

    A Minecraft server is a multiplayer game server that allows players to connect and play together online or over a local network. 

    Note: To make this environment variable permanent, you can add it to the root's .profile by running this command:
    echo YOUR_BUCKET_NAME=$YOUR_BUCKET_NAME >> ~/.profile

    ** Cloud IAP tunnel. Cloud IAP enables context-aware access to VMs via SSH and RDP without bastion hosts

    34.27.244.140
    ---------------------------------------------------------------------------------------------------------------------------------------------------------------


=== Course Introduction ===

    - Google Cloud Products and Services 
        IaaS : CPUs, Memory, Disks, Interfaces 
        PaaS : Servers,VM Intances ; Clusters, Cluster Manangement 
        SaaS : Serverless, Autoscaling 


    - Compute Engine: to run vm on demand in the cloud (IaaS solution)

    - GKE: It let run containerized applications on a cloud env. that google manage for us under our 
           administrative control 
    - App Engine: GCP fully managed platform as a service framework, it's a way to run code in the cloud 
                  without having to worry about infrastructure
    - Cloud Functions: It's a completely serverless env. or function as a service 
    - Cloud Run: A managed compute platform that lets run stateless containers via web requests or Pub/Sub events
                 It is fast. It can automatically scale up and down from zero almost intantaneously and charges only 
                 the ressources used.


    -- Cloud Infrastructure: Foundation 
        . Intro to google Cloud 
        . Virtual Networks 
        . Virtual machines 

    -- Cloud Infrastructure: Core Services 
        . IAM 
        . Data Storage Services 
        . Resource Management 
        . Resoure Monitoring 

    -- Cloud Infrastructure: Scaling and Automaiton 
        . Interconnecting Networks 
        . Load Balancing and Autoscaling 
        . Infrastructure Automation 
        . Managed Serivices 


=== Interaction with Google Cloud ===
    
    - Using Google Cloud: 
        There are four ways to interact with gc:
            . Google Cloud Console 
            . Cloud Shell and Google Cloud CLi 
            . REST-based API 
            . Cloud Mobile APP 

        
    -- Lab: Working with the Google Cloud Console and Shell 
        Lab Objectives:
            . Get access to Google Cloud 
            . Create a Cloud Storage bucket using the Google Cloud console 
            . Create a Cloud Storage bucker using Cloud Shell 
            . Become familiar with Cloud Shell 

        
        . Quiz anwswers: 
            Cloud Shelle provides: 
                Built-in authorization for access to ressources 
                5GB of persistent storage (/home)
                Command-line access to a free temporary Compute Engine VM 

        . Command to create a bucket on the CLI:
            gcloud storage buckets create gs://[BUCKET_NAME]
        
        * In the cloud shell, we can upload a file by clicking the More button (trois points) and then copy it to a 
          bucket with this command : gcloud storage cp [MY_FILE] gs://[BUCKET_NAME]

        - Create a persistent state in Cloud Shell:
            - Indentify available regions:
                . gcloud compute regions list 
            - Create and verify and env. variable:
                . INFRACLASS_REGION=[YOUR_REGION]
                . echo $INFRACLASS_REGION
            - Create a subdirectory for materials used in this lab:
                . mkdir infraclass 
                . touch infraclass/config
            - Append the value of the Region environment variable to the config file:
                . echo INFRACLASS_REGION=$INFRACLASS_REGION >> ~/infraclass/config
            - Create a second environment variable for your Project ID:
                . INFRACLASS_PROJECT_ID=[YOUR_PROJECT_ID]
            - Append the value of the Project ID environment variable to the config file
                . echo INFRACLASS_PROJECT_ID=$INFRACLASS_PROJECT_ID >> ~/infraclass/config
            - We use source to set env. variables and echo to verify 
                . source infraclass/config
                . echo $INFRACLASS_PROJECT_ID

            With this config., when we close the shell, we lose variables. To avoid this, we gonna modify the bash profile 
            and create persistence. 
                . nano .profile ->/ and add the following line to tend of the file 
                . source infraclass/config 
            And the world is happy !!!


        * GC SDK (Software Development Kit): a set of command-line tools and libraries that enable users to manage and interact with GCP.

    -- LAB: Infrastructure Preview: 
        . Jenkins: open-source automation  server primarely used for CI/CD.  Jenkins helps to avoid breaking changes so that you can save 
          time and ensure the delivery of high-quality software. Its web interface provides an easy way to manage and test your applications
          before taking them to production

        * Google Cloud Marketplace let quickly deploy functional software pakcages by providing pre-defined templates with which Deployment 
          Manager service.

        * Deployment Manager is a Google Cloud service that uses templates written in a combination of YAML, python, and Jinja2 to automate 
          the allocation of Google Cloud resources and perform setup tasks

        Here we created a deployemnt by using "Bitinami pakcage for Jenkins". After we lauched Jenkins and examinated the deployment by clicking 
        to site url. We also have done some admin tasks by viewing the deployment in vm instances SSH to it for shutting down and restart the 
        serviices with this commands:
            . sudo /opt/bitnami/ctlscript.sh stop 
            . sudo /opt/bitnami/ctlscript.sh restart 

    - Project Demo:
        Some useful commands:
            . gcloud config list | grep project -> search for a specific project
            . export PROJECT_1_ID=my-seoncond-project-249620 
            . gcloud config set project $PROJECT_1_ID
            . gcloud config list | grep project -> and we'll se another project 


=== Virtual Networks ===

    -- Module Overview :
        PoPs are where Google's network is connected to the rest of internet 

        - VPC objects:
            . Projects 
            . Networks 
                . Default, auto mode, custom mode 
            . Subnetworks -> allow to divide or segregate the env. Work on a reginal scale.
            . Regions 
            . Zones 
            . IP addresses 
                . Internal, external, range 
            . Virtual machines 
            . Routes 
            . Firewall rules 

    -- Projects, networks and subnetworks
        - A project:
            . Associate objects and serivices with billing 
            . Contains networks (up to 15) that can be shared/peered 
            

        - A network:
            . Has no IP address range
            . Is global and spans all available regions 
            . Contains subnetworks 
            . Is available as defaut, auto, or custom 

            * Default:
                . Every project 
                . One subnet per region 
                . Default firewall rules 
            * Auto MOde:
                . Default network 
                . One subnet per region 
                . Regional IP allocation 
                . Fixed /20 subnetwork per region
                . Expandable up to /16

            * Custom Mode:
                . No defaut subnets created 
                . Full control of IP ranges 
                . Regional IP allocation 
                . Expandable to IP ranges we specify 

            -> Note: Google Cloud now support IPv6 !

        * Because VM instances within a VPC network can communicate privately on a global scale, a single VPN can securely connect our on-premises
          network to your Google Cloud network.
        
        * Subnetworks can extend across  zones within the same region.

        - Demo: Expand a subnet 
            . To expand a subnet we have just to change the network  mask (for example from /29 to /23)
        

    -- IP addresses:
        - Internal IP:
            . Allocated from subnet to VMs by DHCP 
            . DHCP lease is renewed every 24 hours 
            . VM name + IP is registred wiht network-scoped DNS 

        - External IP:
            . Assigned from pool (ephemeral)
            . Reserved (static)
            . Bring Your Own IP address (BYOIP)
            . VM doesn't know external IP; it is mapped to the internal IP 

    -- Mapping IP address:
        - DNS resolution for internal addresses 
            Google cloud has two types of internal DNS:
                . Zonal
                . Glabal 
            Each instance has a hostname that can resolved to and internal IP address:
                . The hostname is the same as the instance name 
                . FQDN is [hostname].[zone].c.[projec-id].internal 
                Ex: myserver.us-central1-a.c.guestbook-15617.internal 

            Name resolution is handled by internal DNS resolver:    ------------ search about this after ------------
                . Provided as part of Compute Engine (169.254.169.254)
                . Configured for use one instance via DHCP 
                . Porivides answer for internal and external addresses 
        
        - DNS resolution for external addresses 
            . DNS records for external addresses can be published using existing DNS servers (outisde of Google Cloud)
            . DNS zones can be hosted using Cloud DNS 
                . Google's DNS service 
                . Translate domain names into IP address 
                . Low latency 
                . High availability (100% uptime SLA)
                .  Create and update millions of DNS records 
        
        * We can assign a range fo IP adresses as aliases to a VM's network interface using alias IP ranges. This  is useful if we 
          have multiple services running on a VM, and we want to assign a different IP address to each service.

    -- Routes and firewall:
        - A route is a mapping of an IP range to a destinantion 
        - Firewall rules proctect VM instances from unapproved connnections
            . VPC network functions as distributed firewall 
            . Firewall rules are applied to the network as a whole 
            . Connections are allowed or denied at the instance level 
            . Firewall rules are stateful.
            . Implied deny all ingress and allow all egress 

            -> A firewall rule is composed of:
                . direction 
                . source or destination 
                . protocol and port 
                . action -> to allow or deny packets that match configs
                . priority -> remember : Higher interger indicate low priority 
                . Rule assignement -> assinged to all instances(by default) or certain instances only 

        - Google Cloud Firewall use case: Egress || Ingress
            Conditions:
                . Destination CIDR (Classless Inter-Domain Routing) ranges 
                . Protocols 
                . Ports 
            Action: 
                . Allow ->  permit matching egress || ingress connection 
                . Deny -> block matchin egress || ingress connection 
            
    -- LAB: VPC Networking 
        mynet-notus-vm : 35.244.45.175
        management-net-us-vm : 34.60.7.223
        privatenet-us-vm : 34.171.209.186

        ---------------------------------------------------
        We'll back on this to takes notes 
        ---------------------------------------------------


=== Common Network designs ===
    . Inreased availability with multiple zones 
    . Globalization with multiple regions 

    * Cloud NAT is google's managed network address translation service 

    -> Private Google Acess to Google APIs and services:
        . We should enable Private Google Access to allow VM instances that only have internal IP addresses to reach 
          the external IP addresses of Google APIs and services.
        . Private Google Access has no effect on instances that have external IP addresses
    
 
    
=== Virtual Machines ===
    . Private Google Access has no effect on instances that have external IP addresses
    . Some VMs offer burst capability, meaning that the virtual CPU will run above its rated capacity for a brief period,
      using the available shared physical CPU (this cannot exist in physical hardware).
    
    -- Compute Engine:
        - Tensor Processing Unit (TPU):
            Allow for higher efficiency 

        - Compute: 
            . Diks: Stardard, SSD, or Local SSD
            . Strandard and SSD PDs scale in performance for each GB of space allocated 
            . Local SSDs have higher throughput and lower latency than SSD persistent disks, because they are attached to the 
              physical hardware; however, the data stored on local SSDs persists only until the instance is stoped or deleted.  

        
        - Networking:
            . Auto, custom networks 
            . Inboud/Oubound firewall rules 
                - IP based 
                - Instance/group tags
            . Application Load Balancing 
            . Network Load Balancing 
                - Does not require pre-warming 
            . Global and multi-regional sbnetworks


    -- VM access and lifecycle:
        - Access:
            . Linux -> SSH (require firewall rule to allow tcp:22)
            . Windows -> RDP (require firewall rule to allow tcp:3389)
        - Lifecycle: 
                                                 '<-> Reparing -> Suspending -> Suspended
            . Provisioning -> Staging -> Running '
                                                 '-> Suspending -> Suspended 

            . Patch management:
                - to keep infrastructure up-to-date 
                - Reduce the risk of security vulnerability 

    -- LAB: Create VMs 
        Some useful commands:
            - free -> to see information about used and unused memory  and a custom vm
            - sudo dmidecode -t 17 -> to see details abou the RAM installed on the VM 
            - nproc -> verify number of processors 
            - lscpu -> details about cpu installed on the vm 

    -- Compute options
        Machine type structure:
            - Machine family:
                * General-purpose 
                    - E2 (cost-optimized)
                        . Microservices 
                        . Virtual Desktops 
                        . Development env.

                    - N2, N2D, N1 (Balanced price/performance)
                        . Medium-large databses 
                        . Cache 
                        . Media/Streaming 
                        
                    - Tau T2D, Tau T2A -> (Sacle-out optimized; Best performance/cost for scale-out workloads)
                        . Media transcoding 
                        . Large-scale Java applications 

                * Compute-optimized 
                    - C2 (Ultra high performance for compute-intensive workloads)
                        . High-performance computing 
                        . Media transcoding 
                        . AI/ML 
                    - C2D (Utra high-performance for compute-intensive workloads) 
                        . High-performance databases 
                        . Electronic Design Automation (EDA)
                        . Media transcoding 
                    - H3 (Utra high-performance for compute-intensive workloads)
                        . EDA

                * Memory-optimized
                    - M1 (Uttra high-memory workloads)
                        . In-memory databases, ...
                        
                    - M2 (Uttra high-memory workloads)
                        . In-memory databases, ...
                * Accelerator-optimized
                    - A2 (optimized for high-performance computiong workloads)
                        . CUDA-enabled ML training and inference 
                        . HPC 
                        . Massive parallelized computation 
                    - G2 (optimized for high-performance computiong workloads)
                        . Video transcoding 
                        . Remote visualization workstation 
                    
            - Machine series:
            - Machine type:


    -- Compute Pricing:
        - Per-seond billing, with minimu of 1 minute
            . vCPUs, GPUs, and GB of memory 
        - Resource-based pricing 
            . Each vCPU and each GB of memory is billed separately 
        - Discounts:
            . Sustained use 
            . Commited use 
            . Preemptible VM instances 
        - Recommendation Engine:
            . Notifies us of underutilized instances 
        - Free usage limits 


-- Sepecial Compute Configurations:
    - Preemptible
        . Lower price for interruptible service (up to 91%)
        . VM migh be terminated at any time 
            . not charge if terminated in the first minute 
            . 24 hours max 
            . 30-second terminate waring, but not guranteed 
            . No live migrate; no auto restart

    - Sport VMs 
        . They are the latest version of preemptilbe VMs 
        . Both share the same princing model 
    
    - Sole-tenant nodes physcially isolate workloads
        Use keep your instances physically separated from instances in other projects, or to group your instances 
        together on the same host hardware.

    - Shielded VMS offer verifiable integrity 
        . Secure Boot 
        . Virtual trusted platform module (vTPM)
        . Integrity monitoring 

    - Confidential VMS allow to encryt data in use 
        . Encrypts data while it's being processed 
        . N2D compute engine VM 
        . Provides high memory capacity 


-- Images
    * What's an image ? It include :
        . Boot laoder 
        . Operating Sysem 
        . File System sttrucutre 
        . Software 
        . Customizations 


-- Disks opitons:
    - Persisting disks (HDD and SSD-> more performance)
        . Attached to a VM through the network interface 
        . Durable storage: can survive when vm terminate 
        . Bootable, whe can attach to a VM and boot form it 
        . Snapshotes: incremental backups 
        . Performance: Scales with size 
        . Disk resizing: even running an attached!
        . Can be attached in read-only mode to mutiple VMS 
        . Zonal or Regional 

    - Local SSD Disks (pyhyscally attached to a VM)
        . More IOPSj, lower latency, and higher throughput than persistent disk 
        . 375-GB disk up to 24, total of 9TB per instance 
        . VM-specific: connot be reattached to a different VM
    
    - RAM disk
        . tmpfs -> to store data in memory 
        . Faster than local disk, slower than memory 
            -> To use when application expects a file system strucuture and connot directly store its data memory 
            ->  Fast scratch disk, or fast cache 
        . Very volatile; erase on stop or restart 
        . May need a large machine type if RAM was sized for the application 
        . Consider using a persistent disk to back up RAM disk data 


-- Common Compute Engine actions:
    - Metadata and scripts:
        . Every VM instance stores its metadata on a metatdata server. 
        . Metadata <- Boot | Run | Maintenance | Shutdown 

    - Move an instance to a new zone or region:
        To move a VM, we must shut down the VM, move it to the destination zone or region, and then restart it.
    
    - Snapshot: Backup critical data 
        . to backup critical data into a durable storage solution to meet application, availability, and recovery requirements.
        . Snapshots are stored in Cloud Storage 
    
    - Snapshot: Migrate data between zones 
        We might want to minimize latency by migrating data to a drive that can be locally attached in the zone where it is used.
    
    - Snapshot: Transfert to SSD to improve performance 
        If we want to improve disk performance, we could use a snapshot to transfer data from a standard HDD persistent disk to a SSD persistent disk.

    - Persistent disk snapshots: 
        - Snapshortisjnot available for local SSD 
        - Creates and incremental backup to Cloud Storage 
            . Not visible in our buckets; managed by the snapshot service. 
        - Create scheduled snapshots 
            . we can to this to regularly and automatically backup our zonal and regional persistent disks 
        - Snapshots can be restored to a new persistet disk 
                ! Snapshots doesn't back up metadata, tags, ect.

        - Resize persistent disk 


    -- LAB: Working withe VMs 
        ---------------------
        Have to take notes after 
        ---------------------

        Cloud NAT logging allows you to log NAT connections and errors. When Cloud NAT logging is enabled, one log entry can be generated for each of the following scenarios:
            When a network connection using NAT is created.
            When a packet is dropped because no port was available for NAT.

            Logs not generated !!!

            By default, instance owners are the only users that have the IAP Secured Tunnel User role.




-- Quiz: 
    . What are sustained discount ? 
        Answer : Automatic discounts that you get for running specific Compute Engine resources for a significant portion of the billing month
        
        



            







    